/**
 * @param {number[][]} graph
 * @param {number[]} initial
 * @return {number}
 */
var minMalwareSpread = function(graph, initial) {
    sum = new Map()
    for (const initNode of initial) {
        if (sum.get(initNode)) {
            continue
        }
        m = new Map()
        // m.set(initNode, true)
        deque = [initNode]
        while (deque.length > 0) {
            let node = deque.pop()
            if (m.get(node)) {
                continue
            }
            m.set(node, true)
            for (let i = 0; i < graph[node].length; i++) {
                if (!graph[node][i] || m[i]) {
                    continue
                }
                deque.push(i)
            }
        }
        // console.log(m.size, m)
        for (const [k, v] of m) {
            // console.log(k, m.size)
            sum.set(k, m.size)
        }
    }

    // console.log(sum)
    let max = -1e9
    let node = -1
    for (const n of initial) {
        k = n
        v = sum.get(k)
        if (v > max) {
            max = v
            node = k
            continue
        }
        if (v === max && k < node) {
            max = v
            node = k
            continue
        }
    }
    return node
}

graph = [[1, 1, 0], [1, 1, 0], [0, 0, 1]]
initial = [0, 1]
ret = minMalwareSpread(graph, initial)
console.log(ret)

graph = [[1, 0, 0], [0, 1, 0], [0, 0, 1]]
initial = [0, 2]
ret = minMalwareSpread(graph, initial)
console.log(ret)

graph = [[1, 1, 1], [1, 1, 1], [1, 1, 1]]
initial = [1, 2]
ret = minMalwareSpread(graph, initial)
console.log(ret)

graph = [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 1], [0, 0, 1, 1]]
initial = [3, 1]
ret = minMalwareSpread(graph, initial)
console.log(ret)

graph = [
    [1, 0, 0, 0, 0, 0],
    [0, 1, 0, 0, 0, 0],
    [0, 0, 1, 0, 0, 0],
    [0, 0, 0, 1, 1, 0],
    [0, 0, 0, 1, 1, 0],
    [0, 0, 0, 0, 0, 1]
]
initial = [5, 0]
ret = minMalwareSpread(graph, initial)
console.log(ret)

graph = [[1, 1, 1], [1, 1, 1], [1, 1, 1]]
initial = [1, 2]
ret = minMalwareSpread(graph, initial)
console.log(ret)
